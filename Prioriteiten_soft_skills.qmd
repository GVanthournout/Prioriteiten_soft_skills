---
title: "Welke soft skills zijn belangrijk voor operationeel leidinggevenden?"
subtitle: "Verkennend onderzoek bij cursisten van het veiligheidsinstituut"
author: 
  - "Vanthournout Gert"
  - "Ellen de Bruyne"
  - "Siham Chaoui"
  - "Michiel Wellens"
  - "Heidi Nevelsteen"
date: today
title-block-banner: "#6b8ea4"
format:
  html:
    toc: true
    toc-depth: 3
    number-sections: true
    mainfont: Arial
    font-size: smaller
    linestretch: 1.2
    code-line-numbers: true
  docx:
    toc: true
    number-sections: true
    reference-doc: template.docx
  #Typst:
editor_options: 
  chunk_output_type: console
editor: visual
---

```{r}
#| label: Packages
#| include: false
#| warning: false
#| error: false

# Load R-packages from packages file
source("Packages.R")
```

```{r}
#| label: Load data
#| include: false
#| warning: false
#| error: false

# !! Voor ik de data importeerde paste ik kolomnamen aan in het excelbestand

# Data inladen
Data_start <- read_excel(here ("Data_prioriteiringsoefening.xlsx"))

```

```{r}
#| label: Wrangle data prioriteringsoefening
#| include: false
#| warning: false
#| error: false

# Identifier en gegevens prioriteringsoefening selecteren
Data_prioriteit <- Data_start |> 
  select(Id, Prioritering)

# prioritering spreiden over verschillende kolommen
Data_prioriteit <- separate_wider_delim(Data_prioriteit, cols = Prioritering, delim = ";", names = c("Keuze_1", "Keuze_2", "Keuze_3", "Keuze_4", "Keuze_5", "Keuze_6", "Keuze_7", "Keuze_8", "Keuze_9", "Keuze_10", "Keuze_11"))

# overschot weggooien
Data_prioriteit <- Data_prioriteit |> 
  select(-Keuze_11)

# naar long format brengen
Data_prioriteit_long <- Data_prioriteit |> 
  pivot_longer(cols = Keuze_1:Keuze_10, names_to = "Keuze", values_to = "Soft_skill")

# naam soft skill en omschrijving scheiden
Data_prioriteit_long <- separate_wider_delim(Data_prioriteit_long, cols = Soft_skill, delim = "(", names = c("Soft_skill", "Rommel"))

# Keuze numeriek maken
Data_prioriteit_long <- Data_prioriteit_long |>   
  mutate( Keuze_num = case_when ( 
          Keuze == "Keuze_1" ~ 1,
          Keuze == "Keuze_2" ~ 2,
          Keuze == "Keuze_3" ~ 3,
          Keuze == "Keuze_4" ~ 4,
          Keuze == "Keuze_5" ~ 5,
          Keuze == "Keuze_6" ~ 6,
          Keuze == "Keuze_7" ~ 7,
          Keuze == "Keuze_8" ~ 8,
          Keuze == "Keuze_9" ~ 9,
          Keuze == "Keuze_10"~ 10
          ))

# Identifier, naam soft skill en numerieke keuze selecteren
Data_prioriteit_long <- Data_prioriteit_long |> 
  select(Id, Soft_skill, Keuze_num)

# Terug naar het wide format brengen met soft skills als kolmnamen, deelnemers als rijen en prioirteringen als values
Data_prioriteit_clean <- Data_prioriteit_long |> 
  pivot_wider(names_from = Soft_skill, values_from = Keuze_num)

```

```{r}
#| label: Wrangle data meerkeuzevragen & achtergrondkenmerken
#| include: false
#| warning: false
#| error: false

# Identifier en gegevens meerkeuzevragen selecteren
Data_meerkeuze <- Data_start |> 
  select(Id, Coachen: Opvolgen)

# naar long format brengen
Data_meerkeuze_long <- Data_meerkeuze |> 
  pivot_longer(cols = Coachen: Opvolgen, names_to = "Soft_skill", values_to = "Likert")

# Keuze numeriek maken
Data_meerkeuze_long <- Data_meerkeuze_long |>   
  mutate( Score = case_when ( 
          Likert == "Heel belangrijk" ~ 4,
          Likert == "Belangrijk" ~ 3,
          Likert == "Neutraal" ~ 2,
          Likert == "Niet belangrijk" ~ 1,
          Likert == "Helemaal niet belangrijk" ~ 0
          ))

# Identifier en achtergrondkenmerken  selecteren
Data_achtergrond <- Data_start |> 
  select(Id, Functie: Geslacht)
```


```{r}
#| label: define functions
#| include: false
#| warning: false
#| error: false
#| 
Tabel_aantallen <- function(varx){ Data_start |>
  group_by({{varx}}) |>
  summarise( Aantal =n()) |>
  dplyr::mutate (Totaal = round(Aantal/sum(Aantal)*100),
                 Percentage = paste0(round((Aantal/sum(Aantal))*100), "%")) |>
  ungroup()  
}

Staafdiagram_aantallen <- function(dat, varx, ...) {
ggplot(data = dat, aes(x = {{varx}}, y = Totaal)) +
  geom_bar(stat = "identity", fill = Kleuren_num[4]) +
  coord_flip () +
  geom_text(aes(label = Percentage),
            hjust = 1.5,
            color = "white",
            fontface = "bold",
            size = 3) +
  theme_minimal() +
  theme(plot.title.position = "plot",
        panel.background = element_blank(),
        panel.grid.major = element_blank(), 
        axis.title = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        panel.grid.minor = element_blank(),
        plot.margin = unit(c(1,2,1,1), "cm")
        ) +
    labs(...) 
}
```

```{r}
#| label: Define colors 
#| include: false
#| warning: false
#| error: false

# Creëren van named vectors voor het kleurenpallet

# Kleurenpallet wanneer categorieën worden aangeduid via cijfers
Kleuren_num <-  c("2020-2021" = "aquamarine3","2021-2022" = "#6b8ea4", "2022-2023" ="#a99e95", "4" = "#6b8ea4", "2023-2024" = "#366785")

```

# Situering

De Veiligheid, gezondheid en milieu Checklist Aannemers (VCA) is een lijst met aandachtspunten en werkmethoden op het gebied van veiligheid en gezondheid. De VCA helpt werknemers en operationeel leidinggevenden in risicovolle werkomgevingen om veiliger en gezonder hun werk te doen. Via een VCA-certificaat laten werknemers en operationeel leidinggevenden aan opdrachtgevers zien dat ze zich bewust zijn van de risico’s die ze lopen tijdens hun werk. Er bestaat een aparte certificering voor werknemers (VCA Basis) en voor operationeel leidinggevenden (VCA VOL).

In Vlaanderen organiseert Contractor Safety Management vzw de VCA-certificering. De organisatie is zich bewust van een belangrijke leemte in de huidige opleidingen: ze zetten sterk in op vaktechnische kennis, maar ze besteden onvoldoende aandacht aan de soft skills die essentieel zijn voor een veilige werkomgeving.

In het project ***Veiligheid en leiderschap: Soft Skills voor operationeel leidinggevenden*** ontwikkelen het Veiligheidsinstituut (VI) en het Kenniscentrum Onderzoek Levenslang Leren en Innoveren (OLLI) samen een meetinstrument om soft skills bij operationeel leidinggevenden in kaart te brengen. Ze baseren zich daarvoor op het bestaande instrument Kickstart Your Soft Skills (KYSS). Het is belangrijk dat het instrument de belangrijkste soft skills in kaart brengt en dit op een spaarzame manier doet.

# Opzet

Om een idee te krijgen van welke soft skills het werkveld relevant vindt bij operationeel leidinggevenden organiseerden OLLI en VI een bevraging bij cursisten van het veiligheidsinstituut. Daarbij werd deelnemers gevraagd:

1.  Voor 12 soft skills aan te geven in welke mate ze deze belangrijk vinden.

2.  10 Soft skills te prioriteren van belangrijk naar minder belangrijk.

3.  Een aantal achtergrondkenmerken aan te leveren (Functie, Aantal jaren ervaring, Leeftijd, Geslacht.

Het huidige rapport analyseert de resultaten van deze bevraging.

# Respondentkenmerken

`r nrow(Data_start)` cursisten vulden de bevraging in. Tabel 1 tot 4 geeft een overzicht van achtergrondkenmerken van de deelnemers.

```{r}
#| label: Select relevant data for function
#| echo: false
#| warning: false
#| error: false

tabel_functie <- Tabel_aantallen(Functie) |> 
  select(-Totaal)

gt(tabel_functie)

```

```{r}
#| label: Select relevant data for ervaring
#| echo: false
#| warning: false
#| error: false

tabel_ervaring <- Tabel_aantallen(Ervaring) |> 
  select(-Totaal)

gt(tabel_ervaring)

```

```{r}
#| label: Select relevant data for Leeftijd
#| echo: false
#| warning: false
#| error: false

tabel_leeftijd <- Tabel_aantallen(Leeftijd) |> 
  select(-Totaal)

gt(tabel_leeftijd)

```

```{r}
#| label: Select relevant data for geslacht
#| echo: false
#| warning: false
#| error: false

tabel_geslacht <- Tabel_aantallen(Geslacht) |> 
  select(-Totaal)

gt(tabel_geslacht)

```

# Belang soft skills

## Beschrijvende statistieken

```{r}
#| label: descriptives soft skills
#| echo: false
#| warning: false
#| error: false
Data_meerkeuze_num <- Data_meerkeuze_long |> 
  select(Id, Soft_skill, Score) |> 
  pivot_wider(names_from = Soft_skill, values_from = Score) |> 
  select(-Id)
  
gemiddelde_soft_skills <- round(colMeans(Data_meerkeuze_num, na.rm = T),2)  
gemiddelde_soft_skills <- gemiddelde_soft_skills |> as_tibble() 

sd_soft_skills <- round(sapply(Data_meerkeuze_num, sd, na.rm = T),2)
sd_soft_skills <- sd_soft_skills |> as_tibble() 

median_soft_skills <- round(sapply(Data_meerkeuze_num, median, na.rm = T),2)
median_soft_skills <- median_soft_skills |> as_tibble()

mad_soft_skills <- round(sapply(Data_meerkeuze_num, mad, na.rm = T),2)
mad_soft_skills <- mad_soft_skills |> as_tibble()

Overzicht_soft_skill <- Data_meerkeuze_long |> 
  distinct(Soft_skill)

descriptives_soft_skills <- bind_cols(Overzicht_soft_skill, gemiddelde_soft_skills, sd_soft_skills, median_soft_skills, mad_soft_skills) 

colnames(descriptives_soft_skills) <- c("Soft skill", "Gemiddelde", "Standaarddeviatie", "Mediaan", "MAD")  

gt(descriptives_soft_skills)
```

## Boxplots

```{r}
#| label: boxplots soft skills
#| echo: false
#| warning: false
#| error: false
Data_meerkeuze_long |>
  filter(Soft_skill == "Coachen" | Soft_skill == "Communiceren"| Soft_skill == "Flexibel_opstellen" | Soft_skill == "Omgaan_diversiteit") |> 
  ggplot (mapping = aes(x = Soft_skill, y = Score)) +
  geom_violin(fill= "deepskyblue4", show.legend = F) +
  geom_boxplot(fill = "White", alpha = 0.1) +
  stat_summary(fun = mean, geom = "point", color = "darkorange", size = 3) +
  theme_minimal() +
  theme(plot.title.position = "plot",
        legend.position = "none",
        panel.background = element_blank(),
        panel.grid.major = element_blank(), 
        axis.title.x = element_blank(),
        axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10),
        axis.ticks.x = element_blank(),
        panel.grid.minor = element_blank(),
        plot.margin = margin (t = 1, 
                       r = 1,
                       b = 1,
                       l = 1, 
                       unit = "cm")) +
  labs(x = "", title = "A. Boxplots", subtitle = "Per soft skill") +
  coord_flip()

Data_meerkeuze_long |>
  filter(Soft_skill == "Plannen_organiseren" | Soft_skill == "Team_aansturen"| Soft_skill == "Samenwerken" | Soft_skill == "Voorbeeldgedrag_stellen") |> 
  ggplot (mapping = aes(x = Soft_skill, y = Score)) +
  geom_violin(fill= "deepskyblue4", show.legend = F) +
  geom_boxplot(fill = "White", alpha = 0.1) +
  stat_summary(fun = mean, geom = "point", color = "darkorange", size = 3) +
  theme_minimal() +
  theme(plot.title.position = "plot",
        legend.position = "none",
        panel.background = element_blank(),
        panel.grid.major = element_blank(), 
        axis.title.x = element_blank(),
        axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10),
        axis.ticks.x = element_blank(),
        panel.grid.minor = element_blank(),
        plot.margin = margin (t = 1, 
                       r = 1,
                       b = 1,
                       l = 1, 
                       unit = "cm")) +
  labs(x = "", title = "B. Boxplots", subtitle = "Per soft skill") +
  coord_flip()

Data_meerkeuze_long |>
  filter(Soft_skill == "Zelfstandig_werken" | Soft_skill == "Zorgvuldig_werken"| Soft_skill == "Bewust_zijn_situatie" | Soft_skill == "Opvolgen") |> 
  ggplot (mapping = aes(x = Soft_skill, y = Score)) +
  geom_violin(fill= "deepskyblue4", show.legend = F) +
  geom_boxplot(fill = "White", alpha = 0.1) +
  stat_summary(fun = mean, geom = "point", color = "darkorange", size = 3) +
  theme_minimal() +
  theme(plot.title.position = "plot",
        legend.position = "none",
        panel.background = element_blank(),
        panel.grid.major = element_blank(), 
        axis.title.x = element_blank(),
        axis.text.x = element_text(size = 10),
        axis.text.y = element_text(size = 10),
        axis.ticks.x = element_blank(),
        panel.grid.minor = element_blank(),
        plot.margin = margin (t = 1, 
                       r = 1,
                       b = 1,
                       l = 1, 
                       unit = "cm")) +
  labs(x = "", title = "C. Boxplots", subtitle = "Per soft skill") +
  coord_flip()

```


## Diverging barplot

```{r}
#| label: data wrangling diverging barchart soft skills
#| echo: false
#| warning: false
#| error: false


Data_aantallen <- Data_meerkeuze_long %>%
  group_by(Soft_skill, Likert) %>%
  summarize(Aantal = n()) %>%
  mutate(Verhouding = Aantal/sum(Aantal)) %>%
  mutate(Percentage = round(Aantal/sum(Aantal)*100,0)) %>%
  ungroup()  %>%
  mutate(Percentage_label = percent(Verhouding, accuracy = 1))

#Data_aantallen_versus <- Data_aantallen %>%
 # filter (Waarde != 'Neutraal')

#Data_aantallen_neutraal <- Data_aantallen %>%
  # filter (Waarde == 'Neutraal')

Data_aantallen_diverging <- Data_aantallen %>%
  mutate(Verhouding = if_else(Likert %in% c("Neutraal", "Niet belangrijk"), Verhouding, -Verhouding)) %>% 
  mutate(Percentage_label = percent(Verhouding, accuracy = 1))

Diverging_good_labels <- Data_aantallen_diverging %>%
  mutate(Percentage_label = abs(Verhouding)) %>% 
  mutate(Percentage_label = percent(Percentage_label, accuracy = 1))

Diverging_volgorde <- Diverging_good_labels %>% 
  mutate(Likert = fct_relevel(Likert, "Belangrijk", "Heel belangrijk", "Neutraal", "Niet belangrijk"), Likert = fct_rev(Likert)) 

```

```{r}
#| label: diverging barchart soft skills
#| echo: false
#| warning: false
#| error: false

Diverging_volgorde %>%
  ggplot(aes(x = Soft_skill, 
             y = Verhouding,
             fill = Likert)) +
  geom_col( color = "white", linewidth = 0.8) +
  geom_text(aes(label = Percentage_label),
            position = position_stack(vjust = 0.5),
            color = "white",
            fontface = "bold", size=2.8) +
  scale_x_discrete() +
  coord_flip()+
  scale_fill_manual(breaks = c("Heel belangrijk", "Belangrijk", "Neutraal", "Niet belangrijk"), values = c(
                      "Niet belangrijk" = "darkorange3",
                      "Neutraal" = "grey65",
                      "Belangrijk" = "deepskyblue",
                      "Heel belangrijk" = "deepskyblue4"
                    )) + 
  labs(title = "Hoe belangrijk ervaren cursisten specifieke soft skills?",
       x = NULL,
       fill = NULL) +
  theme_minimal() +
  theme(plot.title.position = "plot",
    axis.text.x = element_blank(),
        axis.title.x = element_blank(),
        panel.grid = element_blank(),
        axis.text.y = element_text(colour = "#68676c",  size = 10),
        title = element_text(colour = "#68676c", face = "bold", size = 12),
        legend.position = "top")


```

# Ranking van soft skills

Deelnemers prioriteerden soft skills van meest belangrijk (1) tot minst belangrijk (10). Op basis van de som van de rangschikkingsscores over de deelnemers heen kunnen we een rangschikking van soft skills opmaken. De standaarddeviatie helpt ons interpreteren in welke make de prioritering sterk afwijkt tussen deelnemers.De tabel hieronder rangschikt de soft skills van meer belangrijk naar minder belangrijk.

## Rangschikking

```{r}
#| label: Ranking soft skills
#| echo: false
#| warning: false
#| error: false

Rangschikking_soft_skills <-  Data_prioriteit_clean |>
  pivot_longer(cols = `Situationeel bewustzijn ` :`Zelfstandigheid ` , names_to = "Skill", values_to = "Prioriteit")|>   dplyr::group_by(Skill) |> 
  summarise(Prioriteit = sum(Prioriteit)) |> 
  ungroup()  

Data_prioriteit_clean_2 <- Data_prioriteit_clean |> 
  select(-Id)

skills <- colnames(Data_prioriteit_clean_2)

gemiddelde_rangschikking <- round(colMeans(Data_prioriteit_clean_2, na.rm = T),2)
gemiddelde_rangschikking <- gemiddelde_rangschikking |> as_tibble() 

gemiddelde_rangschikking <- bind_cols(skills, gemiddelde_rangschikking)

colnames(gemiddelde_rangschikking) <- c("Skill", "Gemiddelde")

sd_rangschikking <- round(sapply(Data_prioriteit_clean_2, sd, na.rm = T),2)
sd_rangschikking <- sd_rangschikking |> as_tibble() 

sd_rangschikking <- bind_cols(skills, sd_rangschikking)

colnames(sd_rangschikking) <- c("Skill", "SD")

ranking_skills <- left_join( Rangschikking_soft_skills, gemiddelde_rangschikking, by = join_by(Skill) ) 
ranking_skills <- left_join( ranking_skills, sd_rangschikking, by = join_by(Skill) )

ranking_skills <- ranking_skills |> 
  arrange(Prioriteit)

gt(ranking_skills)

```

## Stacked barchert

```{r}
#| label: Bar chart soft skills
#| echo: false
#| warning: false
#| error: false

Aantal_soft_skills <-  Data_prioriteit_clean |>
  pivot_longer(cols = `Situationeel bewustzijn ` :`Zelfstandigheid ` , names_to = "Skill", values_to = "Prioriteit")


Aantal_soft_skills$Prioriteit_cat <- as.factor(Aantal_soft_skills$Prioriteit)

Tabel_rangschikking <- Aantal_soft_skills |> 
  select(Skill, Prioriteit_cat) |> 
  group_by(Skill, Prioriteit_cat) |> 
  summarize(Aantal = n()) |> 
  mutate(Percentage = round(Aantal/sum(Aantal)*100,0)) |>  
  ungroup() 

Tabel_rangschikking <- Tabel_rangschikking |> 
  left_join(Rangschikking_soft_skills, by = "Skill" )

ggplot(Tabel_rangschikking, aes(x = Percentage, y = reorder(Skill, desc(Prioriteit)), fill = Prioriteit_cat))  + 
  geom_bar(stat = "identity", color = "white", linewidth = 1) +
  scale_fill_manual(values = c("deepskyblue4", "deepskyblue2", "deepskyblue", "grey50", "grey80", "grey65", "#ffA630", "#DA935b", "#F17720", "#c85200" ), labels = c("1" = "Eerste keuze", "2"= "", "3" ="", "4" = "", "5" = "", "6" = "", "7" = "", "8" = "", "9" = "", "10" = "Laatste keuze")) +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    plot.title.position = "plot",
    axis.text.x = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_blank(), 
    axis.text.y = element_text(colour = "#68676c",  size = 10),
    title = element_text(colour = "#68676c", face = "bold", size = 12),
    legend.title = element_blank(),
    legend.text.position = "top",
    legend.position = "top",
    legend.box = "horizontal",
  ) +
  labs(title ="Welke skills vinden cursisten belangrijk?") +
  guides(fill = guide_legend(nrow = 1, reverse = TRUE))
  


```


# Conclusies







